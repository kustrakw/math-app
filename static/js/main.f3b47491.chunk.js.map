{"version":3,"sources":["index.js"],"names":["Problem","props","answer","showAnswer","answerBottomMargin","num1Margin","num2Margin","answerLeftMargin","num1","num2","className","style","marginLeft","operator","marginBottom","Game","rand1","generateRandmoNumber","rand2","calculateAnswer","state","outcome","input","problems","problemNumber","showHistory","handleSubmit","bind","handleChange","event","this","parseInt","setState","slice","setTimeout","concat","preventDefault","target","value","Math","random","document","getElementById","scrollIntoView","behavior","problemList","map","problem","col","key","data-grid","x","y","w","h","static","problemRender","onSubmit","cols","rowHeight","width","items","type","id","fontSize","autoFocus","onChange","React","Component","ReactDOM","render"],"mappings":"wRAQA,SAASA,EAAQC,GACb,IAAMC,EAASD,EAAME,WAAaF,EAAMC,OAAS,KAC3CE,EAAqBH,EAAME,WAAa,OAAS,OACnDE,EAAa,OACbC,EAAa,OACbC,EAAmBL,EAAS,GAAK,OAAS,OAkB9C,OAfID,EAAMO,KAAO,GAAKP,EAAMQ,KAAO,KAC3BR,EAAMO,KAAO,IACbH,EAAa,OACbE,EAAmB,QAEfN,EAAMQ,KAAO,IACjBH,EAAa,OACbD,EAAa,OACbE,EAAmB,QAGnBA,EAAmB,QAK3B,6BACI,uBACIG,UAAU,SACVC,MAAO,CAACC,WAAYP,IAAcJ,EAAMO,MAE5C,uBACIE,UAAU,WACVC,MAAO,CAACC,WAAYN,IAAcL,EAAMY,SAF5C,IAEuDZ,EAAMQ,MAE7D,uBAAGC,UAAU,UAAb,QACA,uBACIA,UAAU,SACVC,MAAO,CACHG,aAAcV,EACdQ,WAAYL,IAEfL,I,IAMPa,E,YACF,WAAYd,GAAQ,IAAD,sBAGf,IAAMe,GAFN,4CAAMf,KAEagB,uBACbC,EAAQ,EAAKD,uBAEbf,EAAS,EAAKiB,gBAAgBH,EAAOE,EAD1B,KALF,OAQf,EAAKE,MAAQ,CACTC,QAAS,KACTC,MAAO,GACPC,SAAU,CAAC,CACPf,KAAMQ,EACNP,KAAMS,EACNL,SATS,IAUTX,OAAQA,IAEZsB,cAAe,EACfC,aAAa,GAGjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAtBL,E,0EAyBNE,GAAQ,IAAD,OAChB,GAAIC,KAAKV,MAAMG,SAASO,KAAKV,MAAMI,eAAetB,SAAW6B,SAASD,KAAKV,MAAME,MAAM,IAAI,CACvFQ,KAAKE,SAAS,CAACX,QAAS,cAExB,IAAML,EAAQc,KAAKb,uBACbC,EAAQY,KAAKb,uBAEbf,EAAS4B,KAAKX,gBAAgBH,EAAOE,EAD1B,KAEXK,EAAWO,KAAKV,MAAMG,SAASU,QAErCC,YAAW,WACH,EAAKF,SAAS,CACdX,QAAS,KACTC,MAAO,GACPC,SAAUA,EAASY,OAAO,CACtB3B,KAAMQ,EACNP,KAAMS,EACNL,SAXK,IAYLX,OAAQA,IAEZsB,cAAe,EAAKJ,MAAMI,cAAgB,MAE/C,SAEF,CACD,IAAMF,EAAQQ,KAAKV,MAAME,MACzBQ,KAAKE,SAAS,CACVX,QAASC,EAAQ,oCACjBA,MAAO,KAGfO,EAAMO,mB,mCAGGP,GACTC,KAAKE,SAAS,CACVV,MAAOO,EAAMQ,OAAOC,U,6CAOxB,OAAOP,SAFK,EAEU,GAAAQ,KAAKC,SAA4B,M,sCAG3ChC,EAAMC,EAAMI,GACxB,OAAOA,GACH,IAAK,IAEL,QACI,OAAOL,EAAOC,K,2CAKNgC,SAASC,eAAe,SAChCC,eAAe,CAACC,SAAU,a,+BAG5B,IAAD,OAGCC,EAFWf,KAAKV,MAAMG,SAASU,QAERa,KAAI,SAACC,EAASvB,GACvC,IAIMwB,EAAMxB,EAAgB,EAAI,EAAI,EAEpC,OACQ,yBAAKyB,IAAKzB,EAAe0B,YAAW,CAACC,EAAEH,EAAKI,EAFpB,EAE2BC,EAN7C,EAMuDC,EAPtD,EAOgEC,QAAO,IAC1E,kBAACvD,EAAD,CACIQ,KAAQuC,EAAQvC,KAChBC,KAAQsC,EAAQtC,KAChBI,SAAYkC,EAAQlC,SACpBX,OAAU6C,EAAQ7C,OAClBC,WAAc,EAAKiB,MAAMK,aAAgBD,IAAkB,EAAKJ,MAAMI,oBAMpFgC,EAAgB1B,KAAKV,MAAMK,YAAcoB,EAAcA,EAAYf,KAAKV,MAAMI,eAEpF,OACI,0BAAMiC,SAAU3B,KAAKJ,cACjB,kBAAC,IAAD,CACIhB,UAAU,SACVgD,KAAM,GACNC,UAAW,GACXC,MAAO,IACPC,MAAO/B,KAAKV,MAAMI,eAIjBgC,GAEL,2BAAO9C,UAAU,SACT,2BACIoD,KAAK,OACLC,GAAG,QACHzB,MAAOR,KAAKV,MAAME,MAClBX,MAAO,CAACqD,SAAS,OAAQJ,MAAM,QAC/BK,WAAW,EACXC,SAAUpC,KAAKF,gBAG3B,2BAAIE,KAAKV,MAAMC,c,GAtIZ8C,IAAMC,WA8IzBC,IAASC,OACL,kBAACvD,EAAD,MACA0B,SAASC,eAAe,U","file":"static/js/main.f3b47491.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGridLayout from 'react-grid-layout';\nimport './index.css';\nimport '../node_modules/react-grid-layout/css/styles.css';\nimport '../node_modules/react-resizable/css/styles.css';\n\n\nfunction Problem(props) {\n    const answer = props.showAnswer ? props.answer : null;\n    const answerBottomMargin = props.showAnswer ? '40px' : '10px';\n    let num1Margin = '33px';\n    let num2Margin = '10px';\n    let answerLeftMargin = answer < 10 ? '30px' : '20px';\n\n\n    if (props.num1 > 9 || props.num2 > 9) {\n        if (props.num1 < 10) {\n            num1Margin = '45px';\n            answerLeftMargin = '32px';        \n        }\n        else if(props.num2 < 10) {\n            num2Margin = '15px';\n            num1Margin = '24px';\n            answerLeftMargin = '24px';        \n        }\n        else {\n            answerLeftMargin = '30px';\n        }\n    }\n\n    return(\n    <div>\n        <p \n            className='number' \n            style={{marginLeft: num1Margin}}>{props.num1}\n        </p>\n        <p \n            className='operator' \n            style={{marginLeft: num2Margin}}>{props.operator} {props.num2}\n        </p>\n        <p className='equals'>____</p>\n        <p \n            className='answer' \n            style={{\n                marginBottom: answerBottomMargin,\n                marginLeft: answerLeftMargin, \n            }}>\n            {answer}\n        </p>\n    </div>\n    )\n} \n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const rand1 = this.generateRandmoNumber();\n        const rand2 = this.generateRandmoNumber();\n        const operator = '+';\n        const answer = this.calculateAnswer(rand1, rand2, operator);\n        \n        this.state = {\n            outcome: null,\n            input: '',\n            problems: [{\n                num1: rand1, \n                num2: rand2, \n                operator: operator,\n                answer: answer,\n            }],\n            problemNumber: 0,\n            showHistory: true,\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleSubmit(event) {\n        if (this.state.problems[this.state.problemNumber].answer === parseInt(this.state.input,10)){\n            this.setState({outcome: 'Correct!!'});\n\n            const rand1 = this.generateRandmoNumber();\n            const rand2 = this.generateRandmoNumber();\n            const operator = '+';\n            const answer = this.calculateAnswer(rand1, rand2, operator)\n            const problems = this.state.problems.slice();\n\n            setTimeout(() => {\n                    this.setState({\n                    outcome: null,\n                    input: '',\n                    problems: problems.concat({\n                        num1: rand1,\n                        num2: rand2,\n                        operator: operator,\n                        answer: answer,\n                    }),\n                    problemNumber: this.state.problemNumber + 1,\n                });\n            }, 1000);\n        }\n        else {\n            const input = this.state.input;\n            this.setState({\n                outcome: input + ' is incorrect.  Please try again.',\n                input: ''\n            });\n        }\n        event.preventDefault();\n    }\n\n    handleChange(event) {\n        this.setState({\n            input: event.target.value,\n        });\n    }\n\n    generateRandmoNumber() {\n        const min = 1;\n        const max = 10;\n        return parseInt(min + Math.random() * (max + 1 - min), 10);\n    }\n\n    calculateAnswer(num1, num2, operator) {\n        switch(operator) {\n            case '+':\n                return num1 + num2;\n            default:\n                return num1 + num2;\n        }\n    }\n\n    componentDidUpdate() {\n        const element = document.getElementById('input');\n        element.scrollIntoView({behavior: 'smooth'});\n    }\n\n    render() {\n        const problems = this.state.problems.slice();\n\n        const problemList = problems.map((problem, problemNumber) => {\n            const height = 5;\n            const width = 5;\n            // const col = problemNumber > 1 ? width : 0;\n            // const row = (problemNumber % 2) * height;\n            const col = problemNumber > 0 ? 5 : 0;\n            const row = problemNumber > 0 ? 0 : 0;\n            return(\n                    <div key={problemNumber} data-grid={{x:col, y:row, w: width, h:height, static:true}}>\n                        <Problem\n                            num1 = {problem.num1}\n                            num2 = {problem.num2}\n                            operator = {problem.operator}\n                            answer = {problem.answer}\n                            showAnswer = {this.state.showHistory && (problemNumber !== this.state.problemNumber)}      \n                        />\n                    </div>                 \n            )\n        });\n\n        const problemRender = this.state.showHistory ? problemList : problemList[this.state.problemNumber];\n\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <ReactGridLayout \n                    className='layout' \n                    cols={10} \n                    rowHeight={12} \n                    width={200}\n                    items={this.state.problemNumber} \n                    // isDraggable={false} \n                    // isResizable={false} \n                >\n                    {problemRender}\n                </ReactGridLayout>\n                <label className='input'>\n                        <input\n                            type='text'\n                            id='input'\n                            value={this.state.input}\n                            style={{fontSize:'22px', width:'45px'}}\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </label>\n                <p>{this.state.outcome}</p>\n            </form>\n        )\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );"],"sourceRoot":""}